import sys
sys.setrecursionlimit(10000)

def cross(A, B):
    return [A[a] + B[b] for a in range(len(A)) for b in range(len(B))]

cols      = [str(1 + i) for i in range(25)]
rows      = [str(a) for a in 'ABCDEFGHIJKLMNOPQRSTUVWXY']
squares   = cross(rows, cols)
rowunits = [[r + c for c in cols] for r in rows]
colunits = [[r + c for r in rows] for c in cols]
squareunits = [cross(rs, cs) for rs in [rows[a:a+5] for a in range(5)]  for cs in [cols[0:5], cols[5:10], cols[10:15], cols[15:20], cols[20:25]]]
unitlists = rowunits + colunits + squareunits
units = dict([[s, [u for u in unitlists if s in u]] for s in squares])
peers = dict((s, list(set(sum(units[s],[]))-set([s]))) for s in squares)

def parse_grid(grid):
    values = dict((s, 'ABCDEFGHIJKLMNOPQRSTUVWXY') for s in squares)
    for s, d in grid_values(grid).items():
        if d != 'Z' and not assign(values, s, d):
            return False
    return values
    

def grid_values(grid):
    alpha = 'ZABCDEFGHIJKLMNOPQRSTUVWXY'
    chars = [alpha[int(grid[c*2:c*2+2])] for c in range(625)]
    assert len(chars) == 625
    return dict(zip(squares, chars))

def assign(values, s, d):
    other_values = values[s].replace(d, '')
    if all(eliminate(values, s, d2) for d2 in other_values):
        return values
    else:
        return False
 
def eliminate(values, s, d):
    if d not in values[s]:
        return values
    values[s] = values[s].replace(d, '')
    if len(values[s]) == 0:
        return False
    if len(values[s]) == 1:
        d2 = values[s]
        if not all(eliminate(values, s2, d2) for s2 in peers[s]):
            return False
    ## (2) ユニットuで値dを置きうる場所が1カ所だけになったなら、dをその場所に入れる。
    for u in units[s]:
	    dplaces = [s for s in u if d in values[s]]
    if len(dplaces) == 1:
	    # ユニットの中でdを置けるところが1カ所しかないので、そこに置く
        if not assign(values, dplaces[0], d):
            return False
    return values

print(parse_grid('00220000000100050010002100030008000600090000001500190006081300160000001510001417000000240022050200030023000000200003110700000000001802010015000000090000170003200000210000071900011800001600000411001200001200240017002300060002001600100019000500080001000800190012042200000000002300000000000201250017000500040000000501000200002225060000160015120000001400250024060700001400000418001101000022000023211200160000150000001300121100070024001408001900000009000017001000140000001608001300020003090000002400040015000300130000001500000500010024000011000000060016000915000701000802051900001600002421101200110300132300000000001625000000191115042000000022230000000000050600200200031122170000180000131404010019120008250010001100000009000002000600210000180000001400240006000100030000000725001500090016050000002000080002000002000000090001220017001800062300250000001400001800082111000004000003200010220000020000161613000100070000000812001000000613050000110014030000001800240020001602190000000000140000000000182203002500100013002300060018000100120020002100140008001000050000240002210000200000012300251000001200001404000300001600000013001725050000000000220320001100000021001100221715000700000013160021060000000400020123001900200000001500220003002400080002000500100000002500'))

'''line = '00220000000100050010002100030008000600090000001500190006081300160000001510001417000000240022050200030023000000200003110700000000001802010015000000090000170003200000210000071900011800001600000411001200001200240017002300060002001600100019000500080001000800190012042200000000002300000000000201250017000500040000000501000200002225060000160015120000001400250024060700001400000418001101000022000023211200160000150000001300121100070024001408001900000009000017001000140000001608001300020003090000002400040015000300130000001500000500010024000011000000060016000915000701000802051900001600002421101200110300132300000000001625000000191115042000000022230000000000050600200200031122170000180000131404010019120008250010001100000009000002000600210000180000001400240006000100030000000725001500090016050000002000080002000002000000090001220017001800062300250000001400001800082111000004000003200010220000020000161613000100070000000812001000000613050000110014030000001800240020001602190000000000140000000000182203002500100013002300060018000100120020002100140008001000050000240002210000200000012300251000001200001404000300001600000013001725050000000000220320001100000021001100221715000700000013160021060000000400020123001900200000001500220003002400080002000500100000002500'

for s in range(25):
    aaa = ''
    for t in range(25):
        aaa += str(line[s*50+t*2:s*50+t*2+2]) + ' ' 
    print(aaa)'''